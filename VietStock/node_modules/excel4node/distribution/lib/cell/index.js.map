{"version":3,"sources":["../../../source/lib/cell/index.js"],"names":["deepmerge","require","Cell","Row","Column","Style","utils","util","stringSetter","val","logger","ws","wb","warn","JSON","stringify","excelRefs","invalidXml11Chars","chr","match","replace","merged","cells","forEach","c","string","getStringIndex","complexStringSetter","numberSetter","undefined","parseFloat","TypeError","format","i","number","booleanSetter","toString","toLowerCase","bool","formulaSetter","formula","dateSetter","thisDate","Date","isNaN","getTime","date","dtStyle","numberFormat","opts","dateFormat","styleSetter","bind","thisStyle","toObject","Object","borderEdges","border","outline","left","firstCol","right","lastCol","top","firstRow","bottom","lastRow","thisCellsBorder","row","col","s","thisCellStyle","createStyle","style","ids","cellXfs","curStyle","styles","newStyleOpts","mergedStyle","hyperlinkSetter","url","displayStr","tooltip","ref","hyperlinkCollection","add","location","display","font","color","underline","mergeCells","cellBlock","Array","length","sort","sortCellRefs","cellRange","rangeCells","okToMerge","mergedCells","cr","curCells","getAllCellsInExcelRange","intersection","arrayIntersectSafe","error","push","matrix","tmpObj","rows","keys","r","a","b","cellAccessor","row1","col1","row2","col2","isMerged","theseCells","lastUsedRow","lastUsedCol","getExcelAlpha","cellRefs","indexOf","prototype","link","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const deepmerge = require('deepmerge');\nconst Cell = require('./cell.js');\nconst Row = require('../row/row.js');\nconst Column = require('../column/column.js');\nconst Style = require('../style/style.js');\nconst utils = require('../utils.js');\nconst util = require('util');\n\nfunction stringSetter(val) {\n    let logger = this.ws.wb.logger;\n\n    if (typeof (val) !== 'string') {\n        logger.warn('Value sent to String function of cells %s was not a string, it has type of %s',\n            JSON.stringify(this.excelRefs),\n            typeof (val));\n        val = '';\n    }\n\n    let invalidXml11Chars, chr;\n    invalidXml11Chars = /[^\\u0001-\\uD7FF\\uE000-\\uFFFD\\uD800\\uDC00-\\uDBFF\\uDFFF]/u;\n    chr = val.match(invalidXml11Chars);\n    if (chr) {\n        logger.warn('Invalid Character for XML \"' + chr + '\" in string \"' + val + '\"');\n        val = val.replace(chr, '');\n    }\n    // Remove Control characters, they aren't understood by xmlbuilder\n    val = val.replace(invalidXml11Chars, '');\n\n    if (!this.merged) {\n        this.cells.forEach((c) => {\n            c.string(this.ws.wb.getStringIndex(val));\n        });\n    } else {\n        let c = this.cells[0];\n        c.string(this.ws.wb.getStringIndex(val));\n    }\n    return this;\n}\n\nfunction complexStringSetter(val) {\n    if (!this.merged) {\n        this.cells.forEach((c) => {\n            c.string(this.ws.wb.getStringIndex(val));\n        });\n    } else {\n        let c = this.cells[0];\n        c.string(this.ws.wb.getStringIndex(val));\n    }\n    return this;\n}\n\nfunction numberSetter(val) {\n    if (val === undefined || parseFloat(val) !== val) {\n        throw new TypeError(util.format('Value sent to Number function of cells %s was not a number, it has type of %s and value of %s',\n            JSON.stringify(this.excelRefs),\n            typeof (val),\n            val\n        ));\n    }\n    val = parseFloat(val);\n\n    if (!this.merged) {\n        this.cells.forEach((c, i) => {\n            c.number(val);\n        });\n    } else {\n        var c = this.cells[0];\n        c.number(val);\n    }\n    return this;\n}\n\nfunction booleanSetter(val) {\n    if (val === undefined || typeof (val.toString().toLowerCase() === 'true' || ((val.toString().toLowerCase() === 'false') ? false : val)) !== 'boolean') {\n        throw new TypeError(util.format('Value sent to Bool function of cells %s was not a bool, it has type of %s and value of %s',\n            JSON.stringify(this.excelRefs),\n            typeof (val),\n            val\n        ));\n    }\n    val = val.toString().toLowerCase() === 'true';\n\n    if (!this.merged) {\n        this.cells.forEach((c, i) => {\n            c.bool(val.toString());\n        });\n    } else {\n        var c = this.cells[0];\n        c.bool(val.toString());\n    }\n    return this;\n}\n\nfunction formulaSetter(val) {\n    if (typeof (val) !== 'string') {\n        throw new TypeError(util.format('Value sent to Formula function of cells %s was not a string, it has type of %s', JSON.stringify(this.excelRefs), typeof (val)));\n    }\n    if (this.merged !== true) {\n        this.cells.forEach((c, i) => {\n            c.formula(val);\n        });\n    } else {\n        var c = this.cells[0];\n        c.formula(val);\n    }\n\n    return this;\n}\n\nfunction dateSetter(val) {\n    let thisDate = new Date(val);\n    if (isNaN(thisDate.getTime())) {\n        throw new TypeError(util.format('Invalid date sent to date function of cells. %s could not be converted to a date.', val));\n    }\n    if (this.merged !== true) {\n        this.cells.forEach((c, i) => {\n            c.date(thisDate);\n        });\n    } else {\n        var c = this.cells[0];\n        c.date(thisDate);\n    }\n    const dtStyle = new Style(this.ws.wb, {\n        numberFormat: '[$-409]' + this.ws.wb.opts.dateFormat\n    });\n    return styleSetter.bind(this)(dtStyle);\n}\n\nfunction styleSetter(val) {\n    let thisStyle;\n    if (val instanceof Style) {\n        thisStyle = val.toObject();\n    } else if (val instanceof Object) {\n        thisStyle = val;\n    } else {\n        throw new TypeError(util.format('Parameter sent to Style function must be an instance of a Style or a style configuration object'));\n    }\n\n    let borderEdges = {};\n    if (thisStyle.border && thisStyle.border.outline) {\n        borderEdges.left = this.firstCol;\n        borderEdges.right = this.lastCol;\n        borderEdges.top = this.firstRow;\n        borderEdges.bottom = this.lastRow;\n    }\n\n    this.cells.forEach((c) => {\n        if (thisStyle.border && thisStyle.border.outline) {\n            let thisCellsBorder = {};\n            if (c.row === borderEdges.top && thisStyle.border.top) {\n                thisCellsBorder.top = thisStyle.border.top;\n            }\n            if (c.row === borderEdges.bottom && thisStyle.border.bottom) {\n                thisCellsBorder.bottom = thisStyle.border.bottom;\n            }\n            if (c.col === borderEdges.left && thisStyle.border.left) {\n                thisCellsBorder.left = thisStyle.border.left;\n            }\n            if (c.col === borderEdges.right && thisStyle.border.right) {\n                thisCellsBorder.right = thisStyle.border.right;\n            }\n            thisStyle.border = thisCellsBorder;\n        }\n\n        if (c.s === 0) {\n            let thisCellStyle = this.ws.wb.createStyle(thisStyle);\n            c.style(thisCellStyle.ids.cellXfs);\n        } else {\n            let curStyle = this.ws.wb.styles[c.s];\n            let newStyleOpts = deepmerge(curStyle.toObject(), thisStyle);\n            let mergedStyle = this.ws.wb.createStyle(newStyleOpts);\n            c.style(mergedStyle.ids.cellXfs);\n        }\n    });\n    return this;\n}\n\nfunction hyperlinkSetter(url, displayStr, tooltip) {\n    this.excelRefs.forEach((ref) => {\n        displayStr = typeof displayStr === 'string' ? displayStr : url;\n        this.ws.hyperlinkCollection.add({\n            location: url,\n            display: displayStr,\n            tooltip: tooltip,\n            ref: ref\n        });\n    });\n    stringSetter.bind(this)(displayStr);\n    return styleSetter.bind(this)({\n        font: {\n            color: 'Blue',\n            underline: true\n        }\n    });\n}\n\nfunction mergeCells(cellBlock) {\n    let excelRefs = cellBlock.excelRefs;\n    if (excelRefs instanceof Array && excelRefs.length > 0) {\n        excelRefs.sort(utils.sortCellRefs);\n\n        let cellRange = excelRefs[0] + ':' + excelRefs[excelRefs.length - 1];\n        let rangeCells = excelRefs;\n\n        let okToMerge = true;\n        cellBlock.ws.mergedCells.forEach((cr) => {\n            // Check to see if currently merged cells contain cells in new merge request\n            let curCells = utils.getAllCellsInExcelRange(cr);\n            let intersection = utils.arrayIntersectSafe(rangeCells, curCells);\n            if (intersection.length > 0) {\n                okToMerge = false;\n                cellBlock.ws.wb.logger.error(`Invalid Range for: ${cellRange}. Some cells in this range are already included in another merged cell range: ${cr}.`);\n            }\n        });\n        if (okToMerge) {\n            cellBlock.ws.mergedCells.push(cellRange);\n        }\n    } else {\n        throw new TypeError(util.format('excelRefs variable sent to mergeCells function must be an array with length > 0'));\n    }\n}\n\n/**\n * @class cellBlock\n */\nclass cellBlock {\n\n    constructor() {\n        this.ws;\n        this.cells = [];\n        this.excelRefs = [];\n        this.merged = false;\n    }\n\n    get matrix() {\n        let matrix = [];\n        let tmpObj = {};\n        this.cells.forEach((c) => {\n            if (!tmpObj[c.row]) {\n                tmpObj[c.row] = [];\n            }\n            tmpObj[c.row].push(c);\n        });\n        let rows = Object.keys(tmpObj);\n        rows.forEach((r) => {\n            tmpObj[r].sort((a, b) => {\n                return a.col - b.col;\n            });\n            matrix.push(tmpObj[r]);\n        });\n        return matrix;\n    }\n\n    get firstRow() {\n        let firstRow;\n        this.cells.forEach((c) => {\n            if (c.row < firstRow || firstRow === undefined) {\n                firstRow = c.row;\n            }\n        });\n        return firstRow;\n    }\n\n    get lastRow() {\n        let lastRow;\n        this.cells.forEach((c) => {\n            if (c.row > lastRow || lastRow === undefined) {\n                lastRow = c.row;\n            }\n        });\n        return lastRow;\n    }\n\n    get firstCol() {\n        let firstCol;\n        this.cells.forEach((c) => {\n            if (c.col < firstCol || firstCol === undefined) {\n                firstCol = c.col;\n            }\n        });\n        return firstCol;\n    }\n\n    get lastCol() {\n        let lastCol;\n        this.cells.forEach((c) => {\n            if (c.col > lastCol || lastCol === undefined) {\n                lastCol = c.col;\n            }\n        });\n        return lastCol;\n    }\n}\n\n/**\n * Module repesenting a Cell Accessor\n * @alias Worksheet.cell\n * @namespace\n * @func Worksheet.cell\n * @desc Access a range of cells in order to manipulate values\n * @param {Number} row1 Row of top left cell\n * @param {Number} col1 Column of top left cell\n * @param {Number} row2 Row of bottom right cell (optional)\n * @param {Number} col2 Column of bottom right cell (optional)\n * @param {Boolean} isMerged Merged the cell range into a single cell\n * @returns {cellBlock}\n */\nfunction cellAccessor(row1, col1, row2, col2, isMerged) {\n    let theseCells = new cellBlock();\n    theseCells.ws = this;\n\n    row2 = row2 ? row2 : row1;\n    col2 = col2 ? col2 : col1;\n\n    if (row2 > this.lastUsedRow) {\n        this.lastUsedRow = row2;\n    }\n\n    if (col2 > this.lastUsedCol) {\n        this.lastUsedCol = col2;\n    }\n\n    for (let r = row1; r <= row2; r++) {\n        for (let c = col1; c <= col2; c++) {\n            let ref = `${utils.getExcelAlpha(c)}${r}`;\n            if (!this.cells[ref]) {\n                this.cells[ref] = new Cell(r, c);\n            }\n            if (!this.rows[r]) {\n                this.rows[r] = new Row(r, this);\n            }\n            if (this.rows[r].cellRefs.indexOf(ref) < 0) {\n                this.rows[r].cellRefs.push(ref);\n            }\n\n            theseCells.cells.push(this.cells[ref]);\n            theseCells.excelRefs.push(ref);\n        }\n    }\n    if (isMerged) {\n        theseCells.merged = true;\n        mergeCells(theseCells);\n    }\n\n    return theseCells;\n}\n\n/**\n * @alias cellBlock.string\n * @func cellBlock.string\n * @param {String} val Value of String\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.string = function (val) {\n    if (val instanceof Array) {\n        return complexStringSetter.bind(this)(val);\n    } else {\n        return stringSetter.bind(this)(val);\n    }\n};\n\n/**\n * @alias cellBlock.style\n * @func cellBlock.style\n * @param {Object} style One of a Style instance or an object with Style parameters\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.style = styleSetter;\n\n/**\n * @alias cellBlock.number\n * @func cellBlock.number\n * @param {Number} val Value of Number\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.number = numberSetter;\n\n/**\n * @alias cellBlock.bool\n * @func cellBlock.bool\n * @param {Boolean} val Value of Boolean\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.bool = booleanSetter;\n\n/**\n * @alias cellBlock.formula\n * @func cellBlock.formula\n * @param {String} val Excel style formula as string\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.formula = formulaSetter;\n\n/**\n * @alias cellBlock.date\n * @func cellBlock.date\n * @param {Date} val Value of Date\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.date = dateSetter;\n\n/**\n * @alias cellBlock.link\n * @func cellBlock.link\n * @param {String} url Value of Hyperlink URL\n * @param {String} displayStr Value of String representation of URL\n * @param {String} tooltip Value of text to display as hover\n * @returns {cellBlock} Block of cells with attached methods\n */\ncellBlock.prototype.link = hyperlinkSetter;\n\nmodule.exports = cellAccessor;"]}